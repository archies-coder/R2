//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2016.01.24 at 06:38:28 PM IST
//
package com.metamug.parser.schema;

import com.metamug.parser.exception.ResourceTestException;
import com.metamug.parser.service.ParserService;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.xpath.XPathExpressionException;
import org.apache.commons.text.StringEscapeUtils;
import org.xml.sax.SAXException;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "execute", propOrder = {
    "arg"
})
public class Execute extends InvocableElement {
    @XmlElement(name = "Arg")
    protected List<Arg> arg;
    @XmlAttribute(name = "id", required = true)
    protected String id;
    @XmlAttribute(name = "requires")
    protected String requires;
    @XmlAttribute(name = "classname", required = true)
    protected String className;
    @XmlAttribute(name = "when")
    protected String when;
    @XmlAttribute(name = "onerror")
    protected String onerror;
    @XmlAttribute(name = "status")
    protected Integer status;
    @XmlAttribute(name = "verbose")
    private Boolean verbose;
    @XmlAttribute(name = "output")
    private Boolean output;

    public List<Arg> getArg() {
        if (arg == null) {
            arg = new ArrayList<>();
        }
        return this.arg;
    }
    
    /**
     * Gets the value of the id property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets the value of the requires property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getRequires() {
        return requires;
    }

    /**
     * Sets the value of the requires property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setRequires(String value) {
        this.requires = value;
    }

    /**
     * Gets the value of the className property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getClassName() {
        return className;
    }

    /**
     * Sets the value of the className property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setClassName(String value) {
        this.className = value;
    }

    /**
     * Gets the value of the when property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getWhen() {
        return when;
    }

    /**
     * Sets the value of the when property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setWhen(String value) {
        this.when = value;
    }

    /**
     * Gets the value of the onerror property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getOnerror() {
        return onerror;
    }

    /**
     * Sets the value of the onerror property.
     *
     * @param value allowed object is {@link String }
     *
     */
    public void setOnerror(String value) {
        this.onerror = value;
    }

    /**
     * Gets the value of the status property.
     *
     * @return possible object is {@link Integer }
     *
     */
    public Integer getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     *
     * @param value allowed object is {@link Integer }
     *
     */
    public void setStatus(Integer value) {
        this.status = value;
    }

    /**
     * Gets the value of the verbose property.
     *
     * @return possible object is {@link Boolean}.
     *
     */
    public Boolean getVerbose() {
        return verbose;
    }

    /**
     * Sets the value of the verbose property.
     *
     * @param verbose allowed object is {@link Boolean}
     *
     */
    public void setVerbose(Boolean verbose) {
        this.verbose = verbose;
    }
    /**
     * Gets the value of the output property.
     *
     * @return possible object is {@link Boolean}.
     *
     */
    public Boolean getOutput() {
        return output;
    }

    /**
     * Sets the value of the verbose property.
     *
     * @param output allowed object is {@link Boolean}
     *
     */
    public void setOutput(Boolean output) {
        this.output = output;
    }

    @Override
    public void print(XMLStreamWriter writer, ParserService parent) throws XMLStreamException, IOException, XPathExpressionException, ResourceTestException, SAXException {
        this.parent = parent;
        //Execute execute = (Execute)this;
        parent.elementIds.put(getId(), this);
        
        if (getWhen() != null) {
            writer.writeStartElement("c:if");
            //String testString = getQuotedString(execute.getWhen());
            //writer.writeAttribute("test", enclose(testString.replace("$", "mtgReq.params")));
            String test = transformVariables(getWhen(),parent.elementIds,false);
            writeUnescapedData(" test=\""+enclose(StringEscapeUtils.unescapeXml(test))+"\"",parent.output);
        }
        //Print params those are marked as 'requires' in <Execute>
        String requiredParams = getRequires();
        if (requiredParams != null) {
            for (String param : requiredParams.split(",")) {
                writer.writeEmptyElement("m:param");
                writer.writeAttribute("name", param);
                writer.writeAttribute("type", "");
                writer.writeAttribute("value", enclose("mtgReq.params['" + param + "']"));
                writer.writeAttribute("isRequired", "true");
            }
        }
        writer.writeCharacters(System.lineSeparator());
        writer.writeStartElement("m:execute");
        writer.writeAttribute("var", getId());
        writer.writeAttribute("className", getClassName());

        if ( (getVerbose() != null && getVerbose()) 
                || getOutput() != null && getOutput() ) {
            writer.writeAttribute("output", "true");
        }
        if (getOnerror() != null && getOnerror().length() > 0) {
            writer.writeAttribute("onError", getOnerror());
        }
        
        for(Arg arg: getArg()){
            writer.writeEmptyElement("m:arg");
            writer.writeAttribute("name", arg.getName());
            if(arg.getValue()!=null){
                writer.writeAttribute("value", transformVariables(arg.getValue(),parent.elementIds,true) );
            }else{
                //value is null, check path
                if(arg.getPath()!=null){
                    writer.writeAttribute("value", transformVariables(arg.getPath(),parent.elementIds,true) );
                } else{
                    writer.writeAttribute("value","null");
                }
            }
        }
        
        writer.writeCharacters(System.lineSeparator());
        writer.writeEndElement(); // </m:execute>
       
        writer.writeCharacters(System.lineSeparator());

        if (getWhen() != null) {
            writer.writeEndElement(); //End of <c:if>
        }
    }

    @Override
    public Set<String> getRequestParameters() {
        Set<String> p = new HashSet<>();
        getRequestParametersFromString(p,getWhen());
        for(Arg arg: getArg()){
            if(arg.getValue()!=null){
                getRequestParametersFromString(p,arg.getValue());
            }else{
                //value is null, check path
                if(arg.getPath()!=null){
                    getRequestParametersFromString(p,arg.getPath());
                } 
            }
        }
        return p;
    }

    @Override
    public String extractFromMPath(String mpathVariable, String elementId, boolean enclose) {
        
        StringBuilder sb = new StringBuilder();
        
        // bus[id].name
        String locator = getMPathLocator(mpathVariable);
        String transformedVariable = elementId+locator;
        
        sb.append(transformedVariable);        
        
        return enclose ? enclose(sb.toString()) : sb.toString();
    }
}